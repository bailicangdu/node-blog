import * as Koa from 'koa';
import * as corsMiddleware from '@koa/cors';
import * as bodyParser from 'koa-bodyparser';
import { ApolloServerBase } from 'apollo-server-core';
export { GraphQLOptions, GraphQLExtension } from 'apollo-server-core';
import { GraphQLOptions } from 'apollo-server-core';
export interface ServerRegistration {
    app: Koa;
    path?: string;
    cors?: corsMiddleware.Options | boolean;
    bodyParserConfig?: bodyParser.Options | boolean;
    onHealthCheck?: (ctx: Koa.Context) => Promise<any>;
    disableHealthCheck?: boolean;
}
export declare class ApolloServer extends ApolloServerBase {
    createGraphQLServerOptions(ctx: Koa.Context): Promise<GraphQLOptions>;
    protected supportsSubscriptions(): boolean;
    protected supportsUploads(): boolean;
    applyMiddleware({ app, path, cors, bodyParserConfig, disableHealthCheck, onHealthCheck, }: ServerRegistration): void;
}
export declare const registerServer: () => never;
//# sourceMappingURL=ApolloServer.d.ts.map